buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.5.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.3.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.0.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.32.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.3'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.16.0'
}

repositories {
    mavenCentral()
}


apply plugin: 'com.palantir.external-publish'
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'
apply plugin: 'org.inferred.processors'
apply plugin: 'com.palantir.external-publish-jar'

allprojects {
    apply plugin: 'com.palantir.java-format'
}

group 'com.palantir.gradle.consistentversions'
version System.env.CIRCLE_TAG ?: gitVersion()

sourceCompatibility = 1.8

dependencies {
    implementation 'com.google.guava:guava'
    implementation 'com.netflix.nebula:nebula-dependency-recommender'

    testImplementation platform('org.junit:junit-bom')
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"

    annotationProcessor "org.immutables:value"
    compileOnly "org.immutables:value::annotations"
}

tasks.withType(Test) {
    useJUnitPlatform()

    systemProperties = [
            'junit.platform.output.capture.stdout'                  : 'true',
            'junit.platform.output.capture.stderr'                  : 'true',
            'junit.jupiter.execution.parallel.enabled'              : 'true',
            'junit.jupiter.execution.parallel.config.strategy'      : 'dynamic',
            'junit.jupiter.execution.parallel.config.dynamic.factor': '1'
    ]
}

tasks.withType(JavaCompile) {
    // necessary until https://github.com/palantir/gradle-baseline/issues/389
    options.compilerArgs += ['-Werror']
    options.errorprone.disable 'Slf4jLogsafeArgs', 'PreferSafeLoggableExceptions'
}

gradlePlugin {
    plugins {
        consistentVersions {
            id = 'com.palantir.consistent-versions'
            implementationClass = 'com.palantir.gradle.versions.ConsistentVersionsPlugin'
        }
        versionsLock {
            id = 'com.palantir.versions-lock'
            implementationClass = 'com.palantir.gradle.versions.VersionsLockPlugin'
        }
        versionsProps {
            id = 'com.palantir.versions-props'
            implementationClass = 'com.palantir.gradle.versions.VersionsPropsPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-consistent-versions'
    vcsUrl = 'https://github.com/palantir/gradle-consistent-versions'
    description = 'Compact, constraint-friendly lockfiles for your dependencies'
    tags = ['versions']

    // Don't publish the other plugins to the plugin portal
    plugins.removeIf { it.name != 'consistentVersions' }

    plugins {
        consistentVersions {
            displayName = 'Compact, constraint-friendly lockfiles for your dependencies'
        }
    }
}

tasks.publish.dependsOn tasks.publishPlugins
publishPlugins.onlyIf { versionDetails().isCleanTag }
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]
