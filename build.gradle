buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:13.3.0'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'com.palantir.consistent-versions' version '1.12.0'
    id 'org.inferred.processors' version '3.1.0'
    id 'com.palantir.baseline' version '2.0.0'
    id 'com.palantir.git-version' version '0.12.2'
}

repositories {
    jcenter()
    maven {
        url 'https://dl.bintray.com/palantir/releases/'
    }
}

group 'com.palantir.gradle.consistentversions'
version gitVersion()

apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply from: "$rootDir/gradle/publish-jar.gradle"

sourceCompatibility = 1.8

dependencies {
    implementation 'com.google.guava:guava'
    implementation 'com.netflix.nebula:nebula-dependency-recommender'

    testCompile platform('org.junit:junit-bom')
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"

    annotationProcessor "org.immutables:value"
    compileOnly "org.immutables:value::annotations"
}

tasks.withType(Test) {
    useJUnitPlatform()

    systemProperties = [
            'junit.platform.output.capture.stdout'                  : 'true',
            'junit.platform.output.capture.stderr'                  : 'true',
            'junit.jupiter.execution.parallel.enabled'              : 'true',
            'junit.jupiter.execution.parallel.config.strategy'      : 'dynamic',
            'junit.jupiter.execution.parallel.config.dynamic.factor': '1'
    ]
}

tasks.withType(JavaCompile) {
    // necessary until https://github.com/palantir/gradle-baseline/issues/389
    options.errorprone.errorproneArgs += ['-Xep:Slf4jLogsafeArgs:OFF', '-Xep:PreferSafeLoggableExceptions:OFF']
    options.compilerArgs += ['-Werror']
}

gradlePlugin {
    plugins {
        consistentVersions {
            id = 'com.palantir.consistent-versions'
            implementationClass = 'com.palantir.gradle.versions.ConsistentVersionsPlugin'
        }
        versionsLock {
            id = 'com.palantir.versions-lock'
            implementationClass = 'com.palantir.gradle.versions.VersionsLockPlugin'
        }
        versionsProps {
            id = 'com.palantir.versions-props'
            implementationClass = 'com.palantir.gradle.versions.VersionsPropsPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-consistent-versions'
    vcsUrl = 'https://github.com/palantir/gradle-consistent-versions'
    description = 'Compact, constraint-friendly lockfiles for your dependencies'
    tags = ['versions']

    // Don't publish the other plugins to the plugin portal
    plugins.removeIf { it.name != 'consistentVersions' }

    plugins {
        consistentVersions {
            displayName = 'Compact, constraint-friendly lockfiles for your dependencies'
        }
    }
}

tasks.publish.dependsOn tasks.publishPlugins
publishPlugins.onlyIf { versionDetails().isCleanTag }
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]
